#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <unistd.h>
#include <openssl/sha.h>
#include <sys/types.h>
#include <openssl/evp.h>
#include <libgen.h>  // Add this for basename()

#define MAX_FILES 1000
#define MAX_PATH_LENGTH 1024
#define CHANGE_THRESHOLD 10.0 // Alert rate percentage

// Structure for storing file data
typedef struct 
{
    char path[MAX_PATH_LENGTH]; // File Route
    time_t last_modified; // Last modification timestamp
    long file_size; // File Size
    mode_t permissions; // File Permissions
} FileInfo;

// Structure to store baseline (initial stage) of files
typedef struct 
{
    FileInfo files[MAX_FILES];
    int file_count;
} USBBaseline;

// Function to create the initial baseline of files in the USB device
void create_baseline(const char* path, USBBaseline* baseline)
{
    DIR *dir;
    struct dirent *entry;
    char full_path[MAX_PATH_LENGTH];
    struct stat file_stat;

    dir = opendir(path);
    if (!dir)
        return;

    while (((entry = readdir(dir)) != NULL && baseline->file_count < MAX_FILES))
    {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
            continue;

        snprintf(full_path, sizeof(full_path), "%s/%s", path, entry->d_name);

        if (stat(full_path, &file_stat) == -1)
            continue;

        if (S_ISDIR(file_stat.st_mode))
        {
            create_baseline(full_path, baseline);
        }
        else if (S_ISREG(file_stat.st_mode))
        {
            FileInfo* file_info = &baseline->files[baseline->file_count];
            strncpy(file_info->path, full_path, MAX_PATH_LENGTH);
            file_info->last_modified = file_stat.st_mtime;
            file_info->file_size = file_stat.st_size;
            file_info->permissions = file_stat.st_mode & 0777;

            baseline->file_count++;
        }
    }
    closedir(dir);
}

// Baseline comparison
int compare_state(USBBaseline* baseline, const char* path) {
    USBBaseline current_state = {0};
    create_baseline(path, &current_state);

    int modified_files = 0;

    for (int i = 0; i < baseline->file_count; i++) {
        int found = 0;
        for (int j = 0; j < current_state.file_count; j++) {
            if (strcmp(baseline->files[i].path, current_state.files[j].path) == 0) {
                found = 1;

                if (baseline->files[i].file_size != current_state.files[j].file_size) {
                    printf("ALERTA: Cambio de tamaño en: %s\n", baseline->files[i].path);
                    modified_files++;
                }

                if (baseline->files[i].permissions != current_state.files[j].permissions) {
                    printf("ALERTA: Cambio de permisos en: %s\n", baseline->files[i].path);
                    modified_files++;
                }

                if (baseline->files[i].last_modified != current_state.files[j].last_modified) {
                    printf("ALERTA: Cambio en fecha de modificación: %s\n", baseline->files[i].path);
                    modified_files++;
                }

                break;
            }
        }

        if (!found) {
            printf("ALERTA: Archivo eliminado: %s\n", baseline->files[i].path);
            modified_files++;
        }
    }

    for (int j = 0; j < current_state.file_count; j++) {
        int found = 0;
        for (int i = 0; i < baseline->file_count; i++) {
            if (strcmp(baseline->files[i].path, current_state.files[j].path) == 0) {
                found = 1;
                break;
            }
        }
        if (!found) {
            printf("ALERTA: Nuevo archivo detectado: %s\n", current_state.files[j].path);
            modified_files++;
        }
    }

    double change_percentage = (double)modified_files / baseline->file_count * 100.0;

    if (change_percentage > CHANGE_THRESHOLD) {
        printf("ALERTA CRITICA: Cambios significativos detectados (%.2f%%)\n", change_percentage);
        return 1;
    }

    return 0;
}

// Main monitoring function
void monitor_device(const char* mount_path)
{
    USBBaseline initial_baseline = {0};

    // Create Initial Baseline
    create_baseline(mount_path, &initial_baseline);
    printf("Baseline inicial creado con %d archivos\n", initial_baseline.file_count);

    // Continuoues monitoring
    printf("Monitoring...\n");
    compare_state(&initial_baseline, mount_path);
}

// Añadir esta función nueva
void save_baseline_to_file(USBBaseline* baseline, const char* output_file) {
    FILE *fp = fopen(output_file, "w");
    if (!fp) {
        perror("No se pudo abrir archivo de baseline");
        return;
    }

    fprintf(fp, "Baseline USB - Total archivos: %d\n", baseline->file_count);
    for (int i = 0; i < baseline->file_count; i++) {
        fprintf(fp, "Archivo: %s\n", baseline->files[i].path);
        fprintf(fp, "  Tamaño: %ld bytes\n", baseline->files[i].file_size);
        fprintf(fp, "  Última modificación: %s", ctime(&baseline->files[i].last_modified));
        fprintf(fp, "  Permisos: %o\n\n", baseline->files[i].permissions);
    }

    fclose(fp);
}

// Function to load baseline
int load_baseline_from_file(const char* input_file, USBBaseline* baseline) {
    FILE *fp = fopen(input_file, "r");
    if (!fp) {
        perror("No se pudo abrir archivo de baseline");
        return 0;
    }

    baseline->file_count = 0;
    char line[MAX_PATH_LENGTH];
    FileInfo* current_file = NULL;

    while (fgets(line, sizeof(line), fp)) {
        if (strncmp(line, "Archivo: ", 9) == 0) {
            if (baseline->file_count >= MAX_FILES) break;

            current_file = &baseline->files[baseline->file_count];
            sscanf(line + 9, "%s", current_file->path);
            baseline->file_count++;
        }
        else if (strncmp(line, "  Tamaño: ", 10) == 0) {
            sscanf(line + 10, "%ld", &current_file->file_size);
        }
        else if (strncmp(line, "  Última modificación: ", 24) == 0) {
            // Omite ctime parsing por simplicidad
            current_file->last_modified = time(NULL); // se puede mejorar con parsing real
        }
        else if (strncmp(line, "  Permisos: ", 12) == 0) {
            sscanf(line + 12, "%o", &current_file->permissions);
        }
    }

    fclose(fp);
    return baseline->file_count;
}

// Modificar la función main para soportar monitoreo continuo
int main(int argc, char *argv[]) {
    char mount_path[256] = {0};
    char baseline_output[512] = {0};
    char baseline_input[512] = {0};
    char *base_name;

    if (argc < 2) {
        printf("Uso: %s <ruta_usb> [modo]\n", argv[0]);
        return 1;
    }

    strncpy(mount_path, argv[1], sizeof(mount_path));
    base_name = basename(mount_path);

    snprintf(baseline_output, sizeof(baseline_output), 
             "/tmp/usb_baselines/%s_baseline.txt", base_name);

    snprintf(baseline_input, sizeof(baseline_input), 
             "/tmp/usb_baselines/%s_baseline.txt", base_name);

    USBBaseline initial_baseline = {0};

    if (access(baseline_input, F_OK) != -1) {
        if (!load_baseline_from_file(baseline_input, &initial_baseline)) {
            create_baseline(mount_path, &initial_baseline);
            save_baseline_to_file(&initial_baseline, baseline_output);
        }
    } else {
        create_baseline(mount_path, &initial_baseline);
        save_baseline_to_file(&initial_baseline, baseline_output);
    }

    if (argc > 2 && strcmp(argv[2], "monitor") == 0) {
        while(1) {
            compare_state(&initial_baseline, mount_path);
            sleep(10);
        }
    }

    return 0;
}

gcc `pkg-config --cflags gtk+-3.0` -o main     main.c     usb_scanning.c     message_queue.c     port_scanner.c     `pkg-config --libs gtk+-3.0` -lpthread